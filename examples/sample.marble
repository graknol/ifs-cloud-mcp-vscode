// Sample Marble file demonstrating syntax highlighting
// This is a line comment

/*
 * This is a block comment
 * for marble files
 */

# Hash comment style

// Entity definition with annotations
@Entity
@Table("customer_orders")
entity CustomerOrder {
    @Key
    orderId: string;
    
    @Required
    customerName: string;
    
    orderDate: Date;
    totalAmount: decimal;
    status: OrderStatus;
    
    // Method declarations
    public function calculateTotal(): decimal;
    private method validateOrder(): boolean;
}

// View definition
view CustomerOrderView from CustomerOrder {
    orderId,
    customerName,
    orderDate,
    totalAmount,
    
    // Computed fields
    formattedDate: formatDate(orderDate, "YYYY-MM-DD"),
    isExpired: orderDate < currentDate() - 30
}

// Projection with fragments
projection OrderManagement {
    fragment CustomerInfo {
        customerName;
        customerEmail;
        customerPhone;
    }
    
    fragment OrderDetails {
        orderId;
        orderDate;
        status;
        include CustomerInfo;
    }
}

// Service definition
service OrderService {
    // Constants
    const MAX_ORDERS = 1000;
    const DEFAULT_STATUS = "PENDING";
    
    // Variables
    var $currentUser: string;
    var &configValue: any;
    
    // Function with parameters
    public function createOrder(
        customerName: string,
        items: OrderItem[],
        deliveryDate?: Date
    ): OrderResult {
        
        if (customerName == null || customerName == "") {
            throw new ValidationError("Customer name is required");
        }
        
        let totalAmount = 0.0;
        foreach (item in items) {
            totalAmount += item.price * item.quantity;
        }
        
        // Control flow
        switch (deliveryDate) {
            case null:
                deliveryDate = currentDate() + 7;
                break;
            default:
                if (deliveryDate < currentDate()) {
                    return ErrorResult("Invalid delivery date");
                }
        }
        
        // Object creation
        var order = new CustomerOrder {
            orderId: generateId(),
            customerName: customerName,
            orderDate: currentDate(),
            totalAmount: totalAmount,
            status: DEFAULT_STATUS
        };
        
        return SuccessResult(order);
    }
    
    // Async function
    async function processPayment(orderId: string): Promise<PaymentResult> {
        try {
            var result = await PaymentGateway.charge(orderId);
            return result;
        } catch (PaymentException ex) {
            log.error("Payment failed: " + ex.message);
            return PaymentResult.failed(ex.message);
        } finally {
            // Cleanup
            PaymentGateway.cleanup();
        }
    }
}

// Interface definition
interface IOrderRepository {
    function findById(id: string): CustomerOrder?;
    function save(order: CustomerOrder): void;
    function delete(id: string): boolean;
}

// Enum definition
enum OrderStatus {
    PENDING = "PENDING",
    CONFIRMED = "CONFIRMED", 
    SHIPPED = "SHIPPED",
    DELIVERED = "DELIVERED",
    CANCELLED = "CANCELLED"
}

// Type alias
type OrderItem = {
    productId: string;
    productName: string;
    price: decimal;
    quantity: integer;
};

// Namespace
namespace OrderManagement.Core {
    using System.Collections;
    using IFS.Cloud.Common;
    
    // Class with inheritance
    public class OrderProcessor : BaseProcessor, IOrderProcessor {
        private readonly IOrderRepository repository;
        
        // Constructor
        public OrderProcessor(IOrderRepository repo) {
            this.repository = repo;
        }
        
        // Override method
        public override ProcessResult process(Order order) {
            // Implementation here
            return base.process(order);
        }
    }
}

// Numbers and literals
var intValue = 42;
var longValue = 42L;
var floatValue = 3.14f;
var doubleValue = 3.14159;
var hexValue = 0xFF00;
var binaryValue = 0b1010;
var boolValue = true;
var nullValue = null;

// Operators
var result = (a + b) * c / d - e % f;
var comparison = x >= y && z != w || !flag;
var assignment = value += increment;
var ternary = condition ? trueValue : falseValue;
var nullCoalescing = maybeNull ?? defaultValue;
var lambda = (x, y) => x + y;

// String operations
var message = "Hello, " + customerName + "!";
var template = $"Order {orderId} total: {totalAmount:C}";
var multiline = """
    This is a multiline
    string literal
    """;
