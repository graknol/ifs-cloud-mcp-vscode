// IFS Cloud Marble Syntax Highlighting Test
// This file demonstrates the improved pastel theme and keyword recognition

projection OrderManagementHandling {
    
    entity CustomerOrder from CustomerOrder;
    entity OrderLine from OrderLine;
    
    entityset CustomerOrders for CustomerOrder;
    entityset OrderLines for OrderLine;
    
    attribute OrderNo Text {
        label = "Order Number";
        required = true;
        editable = false;
        maxlength = 12;
    }
    
    attribute CustomerNo Text {
        label = "Customer";
        size = 20;
        required = true;
        fetch = "Customer.Name";
        validate = true;
    }
    
    attribute OrderDate Timestamp {
        label = "Order Date";
        required = true;
        editable = true;
    }
    
    attribute OrderValue Number(18,2) {
        label = "Order Value";
        fetch = "sum(OrderLines.NetAmount)";
    }
    
    function CalculateTotal Structure(OrderTotal) {
        parameter OrderNo Text;
        parameter IncludeVAT Boolean;
        
        ludependencies = OrderLine;
        execute {
            call ValidateOrder(OrderNo);
            set TotalAmount = OrderValue;
        }
    }
    
    action CreateOrder {
        initialcheck implementation;
        parameter OrderData Structure(OrderInput);
        parameter CustomerRef Text;
        
        ludependencies = CustomerOrder;
        execute {
            call ValidateCustomer(CustomerRef);
            call SaveOrder(OrderData);
            refresh;
        }
    }
    
    // Query example
    query FindOrders {
        from = "customer_order_view";
        keys = OrderNo, CustomerNo;
        where = "order_date >= :FromDate";
        
        attribute OrderNo Text;
        attribute CustomerName Text;
        attribute OrderStatus Enumeration(OrderState);
    }
    
    // Structure definition
    structure OrderTotal {
        attribute NetAmount Number;
        attribute VATAmount Number;
        attribute TotalAmount Number;
        attribute Currency Text(3);
    }
    
    // Enumeration
    enumeration OrderState {
        value = "Planned" { 
            identifier = "Planned";
            label = "Planned";
        }
        value = "Released" {
            identifier = "Released"; 
            label = "Released";
        }
        value = "Invoiced" {
            identifier = "Invoiced";
            label = "Invoiced";
        }
    }
    
    // References and arrays
    reference CustomerRef(CustomerNo) to Customer(CustomerNo) {
        label = "Customer";
        validate = true;
        component = "selector";
    }
    
    array OrderLineArray(OrderLineNo) to OrderLine(OrderNo, OrderLineNo) {
        navigate = true;
        where = "ORDER_NO = :OrderNo";
    }
}

// Client fragment example
fragment OrderFragment {
    
    CLIENT FRAGMENTS {
        
        selector OrderSelector for CustomerOrder {
            label = "Order Selector";
            static = OrderNo;
            
            orderby = OrderDate desc;
            
            field OrderNo;
            field CustomerName;
            field OrderDate;
            field OrderStatus;
        }
        
        group OrderHeaderGroup for CustomerOrder {
            label = "Order Information";
            collapsed = false;
            
            field OrderNo {
                size = FullWidth;
            }
            field CustomerRef {
                size = Medium;
                validate = command;
            }
            field OrderDate {
                size = Small;
                required = true;
            }
        }
        
        list OrderLinesList for OrderLine {
            label = "Order Lines";
            crudactions {
                new = true;
                edit = true;
                delete = true;
            }
            
            field PartNo;
            field Description;
            field QtyOrdered;
            field SalesUnitPrice;
            field NetAmount;
        }
        
        command CreateOrderCommand for CustomerOrder {
            label = "Create Order";
            mode = SelectedRecords;
            
            variable CustomerVar Text;
            
            execute {
                call GetNextOrderNo() into OrderNoVar;
                call CreateOrder(CustomerVar, OrderNoVar);
                refresh;
            }
        }
        
        commandgroup OrderActions {
            label = "Order Actions";
            
            command ReleaseOrder;
            command InvoiceOrder;
            command CancelOrder;
        }
        
        page OrderPage using CustomerOrders {
            label = "Customer Orders";
            
            selector OrderSelector;
            group OrderHeaderGroup;
            list OrderLinesList using OrderLines;
        }
        
        dialog OrderDialog for CustomerOrder {
            label = "Order Details";
            
            group OrderHeaderGroup;
            
            commandgroup {
                command Ok;
                command Cancel;
            }
        }
        
        assistant OrderAssistant using CustomerOrder {
            label = "Order Assistant";
            savemode = OnLostFocus;
            
            steps {
                step CustomerStep {
                    label = "Customer Information";
                    group CustomerGroup;
                }
                step OrderStep {
                    label = "Order Details"; 
                    group OrderHeaderGroup;
                    list OrderLinesList;
                }
                final step SummaryStep {
                    label = "Summary";
                    markdowntext SummaryText;
                }
            }
        }
        
        lov CustomerLov for Customer {
            label = "Customers";
            
            field CustomerNo;
            field Name;
            field City;
            
            orderby = Name;
        }
    }
    
    PROJECTION FRAGMENTS {
        
        entity CustomerOrder using CustomerOrder {
            
            attribute OrderNo Text {
                required = true;
                label = "Order No";
            }
            
            attribute CustomerRef Text {
                fetch = "Customer_API.Get_Name(CUSTOMER_NO)";
            }
            
            reference CustomerRef(CustomerNo) to Customer(CustomerNo);
            
            array OrderLineArray(OrderLineNo) to OrderLine(OrderNo, OrderLineNo);
            
            action ReleaseOrder {
                ludependencies = CustomerOrder;
            }
            
            function GetOrderTotal Number {
                parameter OrderNo Text;
            }
        }
        
        structure OrderSummary {
            attribute OrderCount Number;
            attribute TotalValue Number;
            attribute AverageValue Number;
        }
    }
}
